<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Typesense\Client;

class GenerateTypesenseSearchKey extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'typesense:generate-search-key';

    /**
     * The console command description.
     */
    protected $description = 'Generate a search-only API key for Typesense and add it to .env';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        try {
            // Check if Typesense is configured
            $adminKey = env('TYPESENSE_API_KEY');
            if (empty($adminKey) || $adminKey === 'xyz') {
                $this->error('❌ TYPESENSE_API_KEY is not configured in .env file');
                $this->info('Please set a secure admin API key first.');

                return 1;
            }

            // Check if we already have a search-only key
            $existingKey = env('TYPESENSE_SEARCH_ONLY_KEY');
            if (! empty($existingKey) && $existingKey !== $adminKey) {
                $this->info('✅ Search-only key already exists in .env file');
                $this->info('🔑 Key: '.substr($existingKey, 0, 8).'...'.substr($existingKey, -4));

                if (! $this->confirm('Do you want to generate a new search-only key?')) {
                    return 0;
                }
            }

            // Create Typesense client
            $client = app(Client::class);

            $this->info('🔄 Generating search-only API key...');

            // Create search-only key
            $keyResponse = $client->keys->create([
                'description' => 'Search-only key for frontend (generated by Laravel)',
                'actions' => ['documents:search'],
                'collections' => ['*'], // Allow searching all collections
            ]);

            $searchOnlyKey = $keyResponse['value'];

            // Update .env file
            $this->updateEnvFile($searchOnlyKey);

            $this->info('✅ Search-only API key generated successfully!');
            $this->info('🔑 Key: '.substr($searchOnlyKey, 0, 8).'...'.substr($searchOnlyKey, -4));
            $this->info('📝 Updated .env file with TYPESENSE_SEARCH_ONLY_KEY');

            // Show key details
            $this->table(
                ['Property', 'Value'],
                [
                    ['ID', $keyResponse['id']],
                    ['Description', $keyResponse['description']],
                    ['Actions', implode(', ', $keyResponse['actions'])],
                    ['Collections', implode(', ', $keyResponse['collections'])],
                    ['Expires', isset($keyResponse['expires_at']) ? date('Y-m-d H:i:s', $keyResponse['expires_at']) : 'Never'],
                ]
            );

            return 0;

        } catch (\Exception $e) {
            $this->error('❌ Failed to generate search key: '.$e->getMessage());

            // Provide helpful debugging info
            if (str_contains($e->getMessage(), 'Connection refused') || str_contains($e->getMessage(), 'Could not resolve host')) {
                $this->warn('💡 Make sure Typesense server is running:');
                $this->line('   ./vendor/bin/sail up -d');
                $this->line('   ./vendor/bin/sail ps | grep typesense');
            } elseif (str_contains($e->getMessage(), 'Unauthorized') || str_contains($e->getMessage(), '401')) {
                $this->warn('💡 Check your TYPESENSE_API_KEY in .env file');
            }

            return 1;
        }
    }

    /**
     * Update the .env file with the search-only key
     */
    private function updateEnvFile(string $searchOnlyKey): void
    {
        $envPath = base_path('.env');

        if (! file_exists($envPath)) {
            throw new \Exception('.env file not found');
        }

        $envContent = file_get_contents($envPath);

        // Check if TYPESENSE_SEARCH_ONLY_KEY already exists
        if (preg_match('/^TYPESENSE_SEARCH_ONLY_KEY=/m', $envContent)) {
            // Update existing key
            $envContent = preg_replace(
                '/^TYPESENSE_SEARCH_ONLY_KEY=.*/m',
                'TYPESENSE_SEARCH_ONLY_KEY='.$searchOnlyKey,
                $envContent
            );
        } else {
            // Add new key after TYPESENSE_API_KEY
            if (preg_match('/^(TYPESENSE_API_KEY=.*)/m', $envContent)) {
                $envContent = preg_replace(
                    '/^(TYPESENSE_API_KEY=.*)/m',
                    "$1\nTYPESENSE_SEARCH_ONLY_KEY=".$searchOnlyKey,
                    $envContent
                );
            } else {
                // Add at the end if TYPESENSE_API_KEY not found
                $envContent .= "\nTYPESENSE_SEARCH_ONLY_KEY=".$searchOnlyKey."\n";
            }
        }

        file_put_contents($envPath, $envContent);
    }
}
