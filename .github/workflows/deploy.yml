name: Deploy To Production

concurrency: production

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    branches:
      - main
    types:
      - completed

jobs:
  deploy:
    # Only deploy if tests were successful or this is a manual trigger
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: ./
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install npm dependencies
        run: npm ci
        
      - name: Build production frontend assets
        run: |
          VITE_POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }} \
          VITE_ARCHYVAS_PASSWORD=${{ secrets.ARCHYVAS_PASSWORD }} \
          VITE_ATSTOVAI_PASSWORD=${{ secrets.ATSTOVAI_PASSWORD }} \
          VITE_SHAREPOINT_CLIENT_ID=${{ secrets.SHAREPOINT_CLIENT_ID }} \
          VITE_SHAREPOINT_TENANT_ID=${{ secrets.SHAREPOINT_TENANT_ID }} \
          npm run build
          
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
          
      - name: Package build artifacts
        run: |
          tar -czf build.tar.gz public/build
          tar -czf vendor.tar.gz vendor
          
      # Build docs if needed
      - name: Build docs
        run: |
          npm run docs:build
          tar -czf docs.tar.gz -C public/docs .
          
      # Deploy to server
      - name: Upload and run on server
        run: |
          echo "Uploading build artifacts..."
          scp build.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.SITE_DIR }}/build.tar.gz
          scp vendor.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.SITE_DIR }}/vendor.tar.gz
          
          # Upload docs changes
          echo "Uploading documentation..."
          if [ -f docs.tar.gz ]; then
            scp docs.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.SITE_DIR }}/docs.tar.gz
          fi
          
          echo "Applying changes on server..."
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ vars.SITE_DIR }} && git pull && \
          rm -rf public/build && tar -xzf build.tar.gz && rm build.tar.gz && \
          rm -rf vendor && tar -xzf vendor.tar.gz && rm vendor.tar.gz && \
          if [ -f docs.tar.gz ]; then rm -rf public/docs/* && tar -xzf docs.tar.gz -C public/docs && rm docs.tar.gz; fi"
          
      # Optimize after upload
      - name: After upload optimization
        run: |
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ vars.SITE_DIR }} && /opt/php83/bin/php /usr/local/bin/composer dump-autoload && /opt/php83/bin/php artisan optimize"
          rm -rf ~/.ssh
      
      
      # Notify about deployment completion
      - name: Deployment notification
        if: success()
        run: |
          echo "::notice::Deployment to production completed successfully at $(date)"
