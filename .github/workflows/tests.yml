name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      - 'dependabot/npm_and_yarn/*'
      - 'dependabot/composer/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      php: ${{ steps.filter.outputs.php }}
      js: ${{ steps.filter.outputs.js }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          php:
            - '**/*.php'
            - 'composer.json'
            - 'composer.lock'
            - 'phpunit.xml'
          js:
            - '**/*.vue'
            - '**/*.js'
            - '**/*.ts'
            - '**/*.tsx'
            - 'package.json'
            - 'package-lock.json'
            - 'vite.config.mts'
            - 'tsconfig.json'

  setup:
    needs: changes
    if: ${{ needs.changes.outputs.php == 'true' || needs.changes.outputs.js == 'true' || github.ref == 'refs/heads/main' }}
    uses: ./.github/workflows/setup.yml
    with:
      include-coverage: true
      
        
  js-tests:
    needs: [changes, setup]
    if: ${{ needs.changes.outputs.js == 'true' || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-assets
        path: ./
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install npm dependencies
      run: npm ci
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
    
    - name: Install Playwright Browsers
      run: npx playwright install chromium --with-deps
    
    - name: Set up environment
      run: |
        cp .env.example .env
        php artisan key:generate --force
    
    - name: Execute tests with coverage
      run: LARAVEL_BYPASS_ENV_CHECK=1 npm run coverage:ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/clover.xml
        flags: frontend
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  php-tests:
    needs: [changes, setup]
    if: ${{ needs.changes.outputs.php == 'true' || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-assets
        path: ./
    
    - name: Start Typesense
      uses: jirevwe/typesense-github-action@v1.0.1
      with:
        typesense-version: "0.25.2"
        typesense-api-key: xyz
    
    - name: Setup PHP with Xdebug
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, fileinfo
        coverage: xdebug
    
    - name: Create SQLite database
      run: |
        touch database/database.sqlite
        cp .env.example .env
        php artisan key:generate --force
    
    - name: Execute tests with coverage
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        SCOUT_DRIVER: database
        TYPESENSE_HOST: localhost
        TYPESENSE_PORT: 8108
        TYPESENSE_API_KEY: xyz
        TYPESENSE_PROTOCOL: http
      run: php artisan test --coverage --coverage-clover ./coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: backend
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
  status-check:
    name: Tests completed
    needs: [changes, js-tests, php-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set status
        run: |
          JS_RESULT="${{ needs.js-tests.result }}"
          PHP_RESULT="${{ needs.php-tests.result }}"
          
          if [[ "$JS_RESULT" == "success" || "$JS_RESULT" == "skipped" ]] && [[ "$PHP_RESULT" == "success" || "$PHP_RESULT" == "skipped" ]]; then
            echo "All tests passed or were skipped"
            exit 0
          else
            echo "Some tests failed: JS=$JS_RESULT, PHP=$PHP_RESULT"
            exit 1
          fi